#!/usr/bin/python

import sys
import os
import math

inputfile=str(sys.argv[1])
outputfile=str(sys.argv[2])

if (not(outputfile.endswith(".jpg") or outputfile.endswith(".JPG") or outputfile.endswith(".jpeg") or outputfile.endswith(".JPEG"))):
    outputfile = outputfile + ".jpeg"

topheader =[0xff, 0xd8, 0xff, 0xe0, 00, 0x10, 0x4a, 
0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 
0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xff,  
0xdb, 0x00, 0x84, 0x00, 0x03, 0x02, 0x02,  
0x03, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03,  
0x04, 0x03, 0x03, 0x04, 0x05, 0x08, 0x05,  
0x05, 0x04, 0x04, 0x05, 0x0a, 0x07, 0x07,  
0x06, 0x08, 0x0c, 0x0a, 0x0c, 0x0c, 0x0b,  
0x0a, 0x0b, 0x0b, 0x0d, 0x0e, 0x12, 0x10,  
0x0d, 0x0e, 0x11, 0x0e, 0x0b, 0x0b, 0x10,  
0x16, 0x10, 0x11, 0x13, 0x14, 0x15, 0x15,  
0x15, 0x0c, 0x0f, 0x17, 0x18, 0x16, 0x14,  
0x18, 0x12, 0x14, 0x15, 0x14, 1, 3,  
4, 4, 5, 4, 5, 9, 5,  
5, 9, 0x14, 0x0d, 0x0b, 0x0d, 0x14,  
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,  
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,  
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,  
0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14,  
0xff, 0xc0, 0x00, 0x11, 0x08]


nextheader =  [3,1, 0x11, 0x00, 02,
0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 
0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 
0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 
0x09, 0x0a, 0x0b, 0x10, 0x00, 0x02, 0x01, 
0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 
0x04, 0x04, 0x00, 0x00, 0x01, 0x7d, 0x01, 
0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 
0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 
0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 
0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 
0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 
0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 
0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 
0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 
0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 
0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 
0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 
0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 
0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 
0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 
0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 
0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 
0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 
0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 
0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 
0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 
0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 
0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 
0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 
0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 
0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 
0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 
0x0b, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 
0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 
0x00, 0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 
0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 
0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 
0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 
0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 
0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 
0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 
0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 
0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 
0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 
0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 
0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 
0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 
0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 
0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 
0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 
0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 
0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 
0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 
0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 
0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 
0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 
0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 
0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 
0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 
0x03, 0x11, 0x00, 0x3f]

footer=[255, 217]

with open (outputfile, "wb") as f:
    bytes=bytearray(topheader)
    f.write(bytes)

    # how big is the file we're converting?
    # change jpeg scaling accordingly
    insize = os.path.getsize(inputfile)

    #small files
    if (insize < (50 * 1024)): # 50 k
        bytes=bytearray([0]) #scale image to make small data look bigger
    else:
        if (insize > (80 * 1024)): #80 k 
            bytes=bytearray([2]) #larger canvas
        else:
            bytes=bytearray([1])

    f.write(bytes)

    if (insize < (20 * 1024)): # 20 k
        bytes=bytearray([0x20, 0x02]) 
    else: 
        limit = 100 * 1024 #100 k
        if (insize > (limit)):      #make image wider
            pad = insize / (limit)
            pad = (pad * 1.65) + 2
            pad = int(math.floor(pad))
            print pad
            if (pad > 0xff):
                pad = 0xFF
            print pad
            bytes=bytearray([0xFF, pad])
        else:
            bytes=bytearray([0xE0, 0x02])

    f.write(bytes)

    if (insize < (10 * 1024)): # 10 k
        bytes=bytearray([0x30])
    else:
        if (insize > (1024 * 1024)): # 1 mb
            bytes=bytearray([0xF0])
        else:
            bytes=bytearray([0x80])

    f.write(bytes)


   
  
    bytes=bytearray(nextheader)
    f.write(bytes)

    # copy over other file
    with open (inputfile, "rb") as i:
        while True:
            bytes=i.read(1024)
            if bytes:
                bytes = bytes.translate(None, bytearray([0xff])) # drop FF's to get rid of early EOF 
                f.write(bytes)
                #print 'looping'
            else:
                break
#        #get anything leftover?
#        while True:
#            bytes=i.read(1)
#            if bytes:
#                f.write(bytes)
#               #print 'looping'
#            else:
#                break
        i.close()        
#    f.write(bytearray([234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 00, 12, 03, 01, 00, 02, 17, 03, 17, 00, 63]))

    bytes=bytearray(footer)
    f.write(bytes)
    f.close()
#endwith
    
